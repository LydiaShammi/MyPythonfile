# Create a numpy array from the list [45,56,78,87,98]
import numpy as np
arr1 = np.array([45,56,78,87,98])
arr1

# Get the type of the numpy array (created earlier) with type function 
# Also print the numpy array
print(type(arr1))
arr1.ndim

# Create 2 numpy arrays as well as lists of size 1000000. 
# Perform element wise addition on both arrays and lists 
# Compare the computational time needed to perform the same
import time
size = 100000  #Size of array 

### Declare python list
L1 = range(size)
L2 = range(size)

# declare two arrays
a1 = np.arange(size)  
a2 = np.arange(size)

## list
start = time.time()
result = [(x+y) for x,y in zip(L1 , L2)]
print("python list took :" ,(time.time()-start)*1000)

## numpy array
start = time.time()
result = a1 + a2
print("numpy array took :" ,(time.time() - start)*1000)

# Create a numpy array from python list having elements 1,4,9,3,2
arr2 = np.array([1,4,9,3,2])
arr2

# Create a matrix having all the elements as 0 having 3 rows and 5 columns
mat1 = np.zeros((3,5))
mat1

# Create a matrix having all the elements as 1 
# having 3 rows and 3 columns having integer data type values
mat2 = np.ones((3,3), dtype= 'i')
mat2

# Create a matrix having all the elements as 8 
# having 4 rows and 4 columns having integer data type values
mat3 = 8*np.ones((3,3), dtype= 'i')
mat3

# Create a matrix having all the elements as 'Hello' 
# having 4 rows and 4 columns having integer data type values
mat3 = np.full((4,4),fill_value='Hello', dtype= 'U5')
mat3

# Create a numpy array with values [3,5,"NAas",6] 
# demonstrate that values of a numpy array are always of the same data type
arr3 = np.array([3,5,"NAas",6])
print(arr3)
print(arr3.dtype)

# Create a numpy array of 3 rows and 4 columns filled with random normal values
mat4 = np.random.normal(0,1,12).reshape((3,4))
mat4

# Create a numpy array of 2 rows and 3 columns filled with random values on a scale of 0 to 1
mat5 = np.random.random(6).reshape((2,3))
mat5

# Create a numpy array of 3 dimensions 
# having 3 elements in every axis filled with random normal values
# Use value of 7 for np.random.seed()
np.random.seed(7)
mat6 = np.random.normal(0,1,3*3*3).reshape((3,3,3))
mat6

# Create a numpy array of 3 rows and 4 columns within some minimum and maximum values
mat7 = np.random.randint(500,600,3*4).reshape((3,4))
mat7

# Use arange() function to get the values starting from a number upto a certain value 
# separated by a constant step size
arr4 = np.arange(5, 61, 5)
arr4

# Create a simple 1d numpy array from python list [1,2,3,4,5]
# pad/add boundary to that numpy array with three 0s on left and two 7s at right
arr5 = [1,2,3,4,5]
  
# padded array
pad_arr = np.pad(arr5, pad_width = (3, 2), mode = 'constant', constant_values=(0, 7))
print(pad_arr)

# Create a simple 1d numpy array from python list [1,2,3,4,5]
# pad/add a boundary to that numpy array with 'linear_ramp' mode 
# having three values added on left and two values added at right
arr5 = [1,2,3,4,5]
  
# padded array
pad_arr = np.pad(arr5, (3, 5), 'linear_ramp', end_values = (-4, -10))
print(pad_arr)

# Create a simple 1d numpy array from python list [1,2,3,4,5]
# pad/add a boundary to that numpy array with maximum value 
# having three values added on left and right
arr5 = [1,2,3,14,5]
  
# padded array
pad_arr = np.pad(arr5, (3, 2), 'maximum')
print(pad_arr)

# Create a numpy array of shape (5, 5) with values ranging from 0 to 25
# flatten that array using np.ravel() function
arr6 = np.arange(0,25).reshape((5,5))
print(arr6)
print(arr6.flatten())
print(arr6.ravel())
# ravel is same as flatten

# Create a numpy array with a list [1,2,1,3,1,5,6,3,5,3,6,9,0,2]
# count the number of times 1 and 5 are occuring
arr7 = np.array([1,2,1,3,1,5,6,3,5,3,6,9,0,2])
np.count_nonzero(arr7 == 1)

c=0
for i in range(len(arr7)):
  if(arr7[i]==1):
    c+=1

print(c)

# Get today's date, yesterday's date and tomorrow's date through numpy.
print(np.datetime64('today', 'D'))
print(np.datetime64('today', 'D') - np.timedelta64(1, 'D'))
print(np.datetime64('today', 'D') + np.timedelta64(1, 'D'))

print(np.datetime64('today', 'D'))

# Create a numpy array with Name, Class and Height as the features
# then sort the array according to height of students
# Sorting based on one feature in numpy array
dtype = [('name', 'U20'), ('class', int), ('height', float)]
students = [('Abhishek', 5, 48.5), ('Shreya', 6, 52.5),('Shruti', 5, 42.10), ('Vijay', 5, 40.11)]

# Creating the actual array
students1 = np.array(students, dtype=dtype)   
print("Actual array :\n", students1)

# Sorted array
print("Sort by height :\n", np.sort(students1, order='height'))

# Write a program to get the indices of sorted elements in a numpy array
# Getting the indices of sorted elements 
employee_id = np.array([10015, 32176, 34813, 73265, 98541, 10876, 35456])
print("Original array :\n", employee_id)

# Getting the indices of sorted elements
i = np.argsort(employee_id)
print("Indices of the sorted elements of a given array : \n", i)

# Write a program (using numpy) to compute the outer product
# cross product of two vectors
a = [4, 7, 3, 4]
b = [2, 8, 1, 6]
np.outer(a,b)

# Write a program to get the sum of diagonal elements of a numpy array 
# using np.trace() and np.diagonal() both
c = np.outer(a,b)
print(np.trace(c))
print(np.diagonal(c).sum())

# Create a simple numpy array with np.arange() function having 16 elements. 
# Change the shape of the actual array to (4,2,2)
arr8 = np.arange(1,17).reshape((4,2,2))
arr8

# Create a numpy array having integers divisible by 4 and less than 100
a1 = np.arange(1,101)
print(a1[a1%4==0])

# or

np.arange(4,101,4)

# Write a code to get common values in 2 numpy arrays
x = np.arange(1,11)
y = np.arange(5,16)
np.intersect1d(x,y)

# Check the data type of above two arrays and convert the data type to floating points
print(x.dtype)
print(y.dtype)
print(x.astype('float'))
print(y.astype('float'))
print(x)
#only displays not saves

# Write a code to get numbers from 0 to 50 using np.arange(). 
# Get the first 20 elements in the given array. 
# Also, get all the elements from the 2nd row. 
# Also, get the element at position (1, 2)
arr = np.arange(50)
print('Getting the first 20 elements :\n', arr[:20])

arr = np.arange(50).reshape(10, 5)
print('Element at position (1, 2) : ', arr[1, 2])
print('Elements from 2nd row :\n', arr[1, :])

# Get the number of dimensions from a numpy array
mat5.ndim

# Get the number of rows and columns of a matrix using shape argument
mat5.shape

# Get the total number of elements in a numpy array using size argument
mat5.size

mat5

# Get the minimum and maximum values in a numpy array using min() and max() function
print(mat5.min())
print(mat5.max())

# Create a 2D array with shape (7, 7). 
# Keep 1 on the border and remaining values should be filled with 0
mat8 = np.ones((7,7), dtype = 'i')
mat8[1:-1, 1:-1] = 0
mat8

mt = np.zeros((5,5), dtype = 'i')
np.pad(mt, (1,1), 'constant', constant_values = [1])

# Create an array of random integer values with shape (3, 3). 
# Add a boundary of width 2 around the actual array filled with value 0. 
# (Hint : Use np.pad())
mat9 = np.random.randint(10, 20, 3*3).reshape((3,3))
np.pad(mat9, (2,2), 'constant', constant_values=0)

# Create a checkerboard pattern with 0s and 1s in an numpy array object. 
# Size of the checkerboard has to be (8, 8)
ar = np.arange(0,64)
ar2 = ar%2
ar3 = ar2.reshape((8,8))
ar3
ar3[[1,3,5,7]] = (ar3[[1,3,5,7]]+1)%2
ar3

# Create 2 random matrices with shape (2, 3) and (3, 5). Perform matrix multiplication
mat_x = np.random.randint(10,20,9).reshape((3,3))
mat_y = np.random.randint(10,20,9).reshape((3,3))
print(mat_x @ mat_y)

# or

mat_x.dot(mat_y)

# We have marks of a particular student in Physics, Chemistry, Mathematics and Biology in a tuple format as follows :
# ('Physics', 92), ('Chemistry', 97), ('Maths', 95), ('Biology', 85)
# You are expected to sort the tuples in ascending order of the marks
# in different subjects using lambda function.
marks = [('Physics', 92), ('Chemistry', 97), ('Maths', 95), ('Biology', 85)]
print("Original list of tuples:\n", marks)
marks.sort(key = lambda x: x[1])
print("Sorting the List of Tuples:\n", marks)