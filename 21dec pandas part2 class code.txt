import numpy as np
import pandas as pd

"""### Merge vs JOIN

#### JOIN

Join columns with other DataFrame either on index or on a key column. Efficiently join multiple DataFrame objects by index at once by passing a list.

syntax: df1.join(df2.set_index('colname'), on = 'colname',how = 'left'/'right'/'inner'/'outer'/'cross', lsuffix="_x", rsuffix="_y", sort=True/False)
"""

## Creating a Dataframe for technology course
technologies = {
    'Courses':["Spark","PySpark","C++","Assembly language"],
    'Fee' :[20000,25000,22000,30000],
    'Duration':['30days','40days','35days','50days'],
              }
index_labels=['r1','r2','r3','r4']
df1 = pd.DataFrame(technologies,index=index_labels)


df1

## Creating a Dataframe for technology course

technologies2 = {
    'Courses':["Spark","Java","C++","Go"],
    'Discount':[2000,2300,1200,2000]
              }
index_labels2=['r1','r6','r3','r5']
df2 = pd.DataFrame(technologies2,index=index_labels2)

df2

"""```
DataFrame.join(other, on=None, how='left', lsuffix='', rsuffix='', sort=False)
```

By default, `.join()` will attempt to do a left join on indices. 

* **other** is the only required parameter. It defines the other DataFrame to join. You can also specify a list of DataFrames here, allowing you to combine a number of datasets in a single .join() call.

* **on** specifies an optional column or index name for the left DataFrame to join the other DataFrame’s index. If it’s set to None, which is the default, then you’ll get an index-on-index join.

* **how** has the same options as how from merge(). The difference is that it’s index-based unless you also specify columns with on.

* **lsuffix** and **rsuffix** are similar to suffixes in merge(). They specify a suffix to add to any overlapping columns but have no effect when passing a list of other DataFrames.

* **sort** can be enabled to sort the resulting DataFrame by the join key.
"""

# Pandas left join two DataFrames by Index
# Here other parameter takes df2
# Default join is left
df3=df1.join(df2, lsuffix="_left", rsuffix="_right")

df3

# Pandas left join two DataFrames by Index
df3=df1.join(df2, lsuffix="_left", rsuffix="_right", how='left')

df3

df3=df1.join(df2, lsuffix="_left", rsuffix="_right")

df3

# Pandas left join two DataFrames by Index
# Here other parameter takes df2
# Joining both dataframe based on inner join
df3=df1.join(df2, lsuffix="_x", rsuffix="_y", how='inner')

df3

# Pandas left join two DataFrames by Index
# Here other parameter takes df2
# Joining both dataframe based on outer join
df3=df1.join(df2, lsuffix="_x", rsuffix="_y", how='outer')

df3

# Pandas left join two DataFrames by Index
# Here other parameter takes df2
# Joining both dataframe based on left join
df3=df1.join(df2, lsuffix="_x", rsuffix="_y", how='left')

df3

# Pandas left join two DataFrames by Index
# Here other parameter takes df2
# Joining both dataframe based on cross join
df3=df1.join(df2, lsuffix="_x", rsuffix="_y", how='cross')

df3

# Pandas left join two DataFrames by Index
# Here other parameter takes df2
# Default join is left
# Using a "on" paramater to join two dataframe
df3=df1.join(df2.set_index('Courses'), on = 'Courses', lsuffix="_x", rsuffix="_y")

df3

# Pandas left join two DataFrames by Index
# Here other parameter takes df2
# Joining both dataframe based on outer join
df3=df1.join(df2.set_index('Courses'), on = 'Courses', lsuffix="_x", rsuffix="_y", sort=True)

df3

"""#### Merge

```
DataFrame.merge(right, how='inner', on=None, left_on=None, right_on=None, left_index=False, right_index=False, sort=False, suffixes=('_x', '_y'),indicator=False, validate=None)
```

* **how** defines what kind of merge to make. It defaults to 'inner', but other possible options include 'outer', 'left', and 'right'.

* **on** tells merge() which columns or indices, also called key columns or key indices, you want to join on. This is optional. If it isn’t specified, and left_index and right_index (covered below) are False, then columns from the two DataFrames that share names will be used as join keys. If you use on, then the column or index that you specify must be present in both objects.

* **left_on** and **right_on** specify a column or index that’s present only in the left or right object that you’re merging. Both default to None.

* **left_index** and **right_index** both default to False, but if you want to use the index of the left or right object to be merged, then you can set the relevant argument to True.

* **suffixes** is a tuple of strings to append to identical column names that aren’t merge keys. This allows you to keep track of the origins of columns with the same name.

* **sort** can be enabled to sort the resulting DataFrame by the join key. If False, the order of the join keys depends on the join type (how keyword).

* **indicator** if True, adds a column to the output DataFrame called “_merge” with information on the source of each row. The column can be given a different name by providing a string argument. The column will have a Categorical type with the value of “left_only” for observations whose merge key only appears in the left DataFrame, “right_only” for observations whose merge key only appears in the right DataFrame, and “both” if the observation’s merge key is found in both DataFrames.
"""

print(df1)
df2

# pandas merge - inner join by default
# Also, try right, outer and cross join
df3=pd.merge(df1,df2, how = 'left')
df3

## Creating an Dataframe for technology course

technologies2 = {
    'Courses':["Spark","Java","C++","Go"],
    'Fee': [20000, 15000, 22000, 8000],
    'Discount':[2000,2300,1200,2000]
              }
index_labels2=['r1','r6','r3','r5']
df2 = pd.DataFrame(technologies2,index=index_labels2)

## Creating an Dataframe for technology course
technologies = {
    'Courses':["Spark","PySpark","C++","Assembly language"],
    'Fee' :[20000,25000,22000,30000],
    'Duration':['30days','40days','35days','50days'],
              }
index_labels=['r1','r2','r3','r4']
df1 = pd.DataFrame(technologies,index=index_labels)

df1

df2

"""if 'on' column is not provided pandas automatically sees all common columns and tries to merge on those."""

# Merge two DataFrames by autoselecting common column using pandas.merge()
df3 = pd.merge(df1, df2, how='left')
print(df1)
print(df2)
df3

d1 = pd.DataFrame({'cat':['wood', 'wood', 'wood', 'plastic', 'plastic'],
                   'product': ['chair', 'table', 'spoon', 'cup', 'spoon'], 
                   'price': [20, 40, 50, 100 ,60]})

d2 = pd.DataFrame({'cat':['wood', 'wood', 'wood', 'plastic', 'plastic'],
                   'product': ['cup', 'table', 'spoon', 'cup', 'chair'], 
                   'disc': [0.2, 0.2, 0.21, 0.15 ,0.18]})

d1

d2

pd.merge(d1, d2, how = 'left')

# Merge two DataFrames (Left Join) by index using pandas.merge()
# Output joining column i.e Courses in the output
df3 = pd.merge(df1, df2, left_index=True, right_index=True, how='left')

df3

# Merge two DataFrames by index using pandas.merge()
df3 = pd.merge(df1, df2, left_index=True, right_index=True, how='right', suffixes=["_left", "_right"])

df3

# Merge DataFrames by Column using an "on" parameter
df3=pd.merge(df1,df2, on='Courses', how="left")
print(df3)

d1

d2

d3 = pd.merge(d1, d2, how='left')
d3

df1

df2

# Merge DataFrames by Column using an "on" parameter and sort the results
df3=pd.merge(df1,df2, on='Courses', how="left", sort=True)
print(df3)

# Merge (Outer join) DataFrames by Column and use indicator parameter to see the merging
df3=pd.merge(df1,df2, how="outer", indicator=True)
print(df3)

technologies = {
    'Courses_Batch_A':["Spark","PySpark","C++","Assembly language"],
    'Fee' :[20000,25000,22000,30000],
    'Duration':['30days','40days','35days','50days'],
              }
index_labels=['r1','r2','r3','r4']
df11 = pd.DataFrame(technologies,index=index_labels)

technologies2 = {
    'Courses_Batch_B':["Spark","Java","C++","Go"],
    'Discount':[2000,2300,1200,2000]
              }
index_labels2=['r1','r6','r3','r5']
df22 = pd.DataFrame(technologies2,index=index_labels2)

# Merge two DataFrames by index using pandas.merge()
# While merging, merge function will try to find a common column else it will throw an error
df3 = pd.merge(df11, df22, how='left')

df3

# When column names are different
df3=pd.merge(df11,df22, left_on='Courses_Batch_A', right_on='Courses_Batch_B', how='left')
print(df3)

"""## GROUP BY

`DataFrame.groupby(by=None, axis=0, level=None, as_index=True, sort=True)`

Parameters :
* **by** : mapping, function, str, or iterable
axis : int, default 0
* **level** : If the axis is a MultiIndex (hierarchical), group by a particular level or levels
* **as_index** : For aggregated output, return object with group labels as the index. Only relevant for DataFrame input. as_index=False is effectively “SQL-style” grouped output
* **sort** : Sort group keys. Get better performance by turning this off. Note this does not influence the order of observations within each group. groupby preserves the order of rows within each group.
"""

# importing pandas module
import pandas as pd
  
# Define a dictionary containing employee data
data1 = {'Name':['Jai', 'Anuj', 'Jai', 'Princi',
                 'Gaurav', 'Anuj', 'Princi', 'Abhi'],
        'Age':[27, 24, 22, 32,
               33, 36, 27, 32],
        'Address':['Nagpur', 'Kanpur', 'Allahabad', 'Kannuaj',
                   'Jaunpur', 'Kanpur', 'Allahabad', 'Aligarh'],
        'Qualification':['Msc', 'MA', 'MCA', 'Phd',
                         'B.Tech', 'B.com', 'Msc', 'MA'],
             'Score': [23, 34, 35, 45, 47, 50, 52, 53]}
    
  
# Convert the dictionary into DataFrame 
df = pd.DataFrame(data1)
  
df

df = pd.DataFrame({'ID': [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30],
                   'name': ['a','s','g','d','fd','df','sd','fsd','cx','v','dfd','xdv','fg','fg','r','th','ynj','hg','b','cx','gfh',
				   'xf','ghh','ynj','tj','ghh','fy','jhy','gfhykj','fg'],
                   'class_1': [3,4,5,5,4,3,5,5,4,3,4,3,3,3,4,5,4,3,5,3,5,4,4,5,4,3,3,5,3,4],
                   'house': ['yellow','red','blue','red','yellow','blue','red','red','blue','yellow','blue','red','red','blue','red',
				   'yellow','red','blue','red','yellow','red','blue','red','red','yellow','blue','red','yellow','yellow','yellow'],
                   'marks': [70,72,91,35,55,40,20,50,58,42,58,40,100,54,46,51,47,38,21,32,27,53,50,53,67,6,81,67,39,10]})

df

# Using groupby function
# with one key
 
grp_df_1 = df.groupby(by='house')
print(grp_df_1.groups)

# Using groupby function
# with one key
 
grp_df_1 = df.groupby(by='class_1').mean()
grp_df_1['marks']

grp_df_1 = df.groupby(by='house', axis=0)
print(grp_df_1.groups)

Marks = {'Name':['Jai', 'Anuj', 'Jai', 'Princi',
                 'Gaurav', 'Anuj', 'Princi', 'Abhi'],
             'Maths': [23, 34, 35, 45, 47, 50, 52, 53],
         'Physics': [45, 47, 50, 32, 23, 34, 35, 43],
         'Science': [34, 35, 45, 47, 50, 32, 23, 33],
         }
  
# Convert the dictionary into DataFrame 
dfm = pd.DataFrame(Marks)
  
dfm

#create DataFrame
df_marks = pd.DataFrame({'name': ['Amit', 'Amit', 'Amit', 'Amit', 'Bhushan', 'Bhushan', 'Bhushan', 'Bhushan'],
                         'term' : ['midterm 1', 'midterm 1','midterm 2','midterm 2','midterm 1', 'midterm 1','midterm 2','midterm 2'],
                   'subject': ['English', 'Science', 'English', 'Science', 'English', 'Science', 'English', 'Science'],
                   'marks': [46, 38, 59, 81, 43, 58, 68, 65]})

#define multiindex
df_marks.set_index(['name', 'term', 'subject'], inplace=True)

#view DataFrame
df_marks

# calculate sum of markes grouped by 2 levels of the multiindex
df_marks.groupby(level=['name', 'subject']).sum()
# either by or level, only one can be used

df.set_index(['class_1', 'house'], inplace=True)

df

df.groupby(level=['class_1', 'house']).mean()['marks']

df_marks.groupby(level=['name', 'subject']).max()

# applying groupby() function to
# group the data on Name value.
gk = df.groupby(by='house')   ## Here groupby column is used ad index 
   
# Let's print the first entries
# in all the groups formed.
gk.first()

# Use as_index=False to treat groupby column as regular column
gk = df.groupby(by='house', as_index=False)
   
# Let's print the first entries
# in all the groups formed.
gk.first()

# selecting a single group
 
grp = df.groupby('house')
print(grp.get_group('blue'))

# selecting object grouped
# on multiple columns
 
grp = df.groupby(['class_1', 'house'])
print(grp.get_group((5, 'red')))